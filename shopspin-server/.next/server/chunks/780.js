exports.id=780,exports.ids=[780],exports.modules={6487:()=>{},7178:(e,t,r)=>{"use strict";r.d(t,{RJ:()=>s,Tf:()=>o,qp:()=>a});class i{constructor(e,t){this.attempts=new Map,this.maxAttempts=e,this.windowMs=t}isRateLimited(e){let t=Date.now(),r=this.attempts.get(e);return!r||t>r.resetTime?(this.attempts.set(e,{count:1,resetTime:t+this.windowMs}),!1):r.count>=this.maxAttempts||(r.count++,!1)}getRemainingAttempts(e){let t=this.attempts.get(e);return!t||Date.now()>t.resetTime?this.maxAttempts:Math.max(0,this.maxAttempts-t.count)}getResetTime(e){let t=this.attempts.get(e);return!t||Date.now()>t.resetTime?Date.now():t.resetTime}cleanup(){let e=Date.now();for(let[t,r]of this.attempts.entries())e>r.resetTime&&this.attempts.delete(t)}}let a=new i(10,36e5),s=new i(3,36e5),n=new i(100,36e5);function o(e){let t=e.headers.get("x-forwarded-for"),r=e.headers.get("x-real-ip"),i=e.headers.get("x-client-ip");return t?t.split(",")[0].trim():r||i||"unknown"}setInterval(()=>{a.cleanup(),s.cleanup(),n.cleanup()},6e5)},8335:()=>{},8994:(e,t,r)=>{"use strict";r.d(t,{P:()=>n});var i=r(6330);let a=globalThis.prisma??new i.PrismaClient({log:["query"]});class s{async createUser(e){let t=await a.user.create({data:{email:e.email,name:e.name,street:e.address.street,city:e.address.city,state:e.address.state,zipCode:e.address.zipCode,country:e.address.country,phone:e.phone}});return this.formatUser(t)}async getUserByEmail(e){let t=await a.user.findUnique({where:{email:e}});return t?this.formatUser(t):null}async getUserById(e){let t=await a.user.findUnique({where:{id:e}});return t?this.formatUser(t):null}async updateUser(e,t){try{let r={};t.email&&(r.email=t.email),t.name&&(r.name=t.name),void 0!==t.phone&&(r.phone=t.phone),t.address&&(r.street=t.address.street,r.city=t.address.city,r.state=t.address.state,r.zipCode=t.address.zipCode,r.country=t.address.country);let i=await a.user.update({where:{id:e},data:r});return this.formatUser(i)}catch(e){return console.error("Error updating user:",e),null}}async createBet(e){let t=await a.bet.create({data:{userId:e.userId,productName:e.product.name,productPrice:e.product.price,productCurrency:e.product.currency,productUrl:e.product.url,productImage:e.product.image,stakeAmount:e.stakeAmount,probability:e.probability,won:e.won,betTimestamp:e.betTimestamp}});return this.formatBet(t)}async getBetById(e){let t=await a.bet.findUnique({where:{id:e}});return t?this.formatBet(t):null}async getBetsByUserId(e){return(await a.bet.findMany({where:{userId:e},orderBy:{betTimestamp:"desc"}})).map(this.formatBet)}async getAllBets(){return(await a.bet.findMany({orderBy:{betTimestamp:"desc"}})).map(this.formatBet)}async createWin(e){let t=await a.win.create({data:{userId:e.userId,productName:e.product.name,productPrice:e.product.price,productCurrency:e.product.currency,productUrl:e.product.url,productImage:e.product.image,stakeAmount:e.stakeAmount,probability:e.probability,status:this.mapStatusToPrisma(e.status),orderNumber:e.orderDetails?.orderNumber,trackingNumber:e.orderDetails?.trackingNumber,estimatedDelivery:e.orderDetails?.estimatedDelivery,actualDelivery:e.orderDetails?.actualDelivery,notes:e.orderDetails?.notes,winTimestamp:e.winTimestamp}});return this.formatWin(t)}async getWinById(e){let t=await a.win.findUnique({where:{id:e}});return t?this.formatWin(t):null}async getWinsByUserId(e){return(await a.win.findMany({where:{userId:e},orderBy:{winTimestamp:"desc"}})).map(this.formatWin)}async getAllWins(){return(await a.win.findMany({orderBy:{winTimestamp:"desc"}})).map(this.formatWin)}async updateWin(e,t){try{let r={};t.status&&(r.status=this.mapStatusToPrisma(t.status)),t.orderDetails&&(void 0!==t.orderDetails.orderNumber&&(r.orderNumber=t.orderDetails.orderNumber),void 0!==t.orderDetails.trackingNumber&&(r.trackingNumber=t.orderDetails.trackingNumber),void 0!==t.orderDetails.estimatedDelivery&&(r.estimatedDelivery=t.orderDetails.estimatedDelivery),void 0!==t.orderDetails.actualDelivery&&(r.actualDelivery=t.orderDetails.actualDelivery),void 0!==t.orderDetails.notes&&(r.notes=t.orderDetails.notes));let i=await a.win.update({where:{id:e},data:r});return this.formatWin(i)}catch(e){return console.error("Error updating win:",e),null}}async getStatistics(){let[e,t,r]=await Promise.all([a.user.count(),a.bet.findMany(),a.win.findMany()]),i=t.reduce((e,t)=>e+t.stakeAmount,0),s=r.reduce((e,t)=>e+t.productPrice,0),n=t.length,o=t.filter(e=>e.won).length;return{totalUsers:e,totalBets:n,winningBets:o,losingBets:t.filter(e=>!e.won).length,winRate:parseFloat((n>0?o/n*100:0).toFixed(2)),totalWins:r.length,pendingWins:r.filter(e=>"PENDING"===e.status).length,processingWins:r.filter(e=>"PROCESSING"===e.status).length,orderedWins:r.filter(e=>"ORDERED"===e.status).length,shippedWins:r.filter(e=>"SHIPPED"===e.status).length,deliveredWins:r.filter(e=>"DELIVERED"===e.status).length,totalStakesCollected:i,totalValuePaidOut:s,profitLoss:i-s}}async reset(){await a.$transaction([a.bet.deleteMany(),a.win.deleteMany(),a.user.deleteMany()])}formatUser(e){return{id:e.id,email:e.email,name:e.name,address:{street:e.street,city:e.city,state:e.state,zipCode:e.zipCode,country:e.country},phone:e.phone,createdAt:e.createdAt,updatedAt:e.updatedAt}}formatBet(e){return{id:e.id,userId:e.userId,product:{name:e.productName,price:e.productPrice,currency:e.productCurrency,url:e.productUrl,image:e.productImage},stakeAmount:e.stakeAmount,probability:e.probability,won:e.won,betTimestamp:e.betTimestamp,createdAt:e.createdAt,updatedAt:e.updatedAt}}formatWin(e){try{return{id:e.id,userId:e.userId,product:{name:e.productName,price:e.productPrice,currency:e.productCurrency,url:e.productUrl,image:e.productImage},stakeAmount:e.stakeAmount,probability:e.probability,status:e.status?e.status.toLowerCase():"pending",orderDetails:{orderNumber:e.orderNumber||null,trackingNumber:e.trackingNumber||null,estimatedDelivery:e.estimatedDelivery||null,actualDelivery:e.actualDelivery||null,notes:e.notes||null},winTimestamp:e.winTimestamp,createdAt:e.createdAt,updatedAt:e.updatedAt}}catch(t){throw console.error("Error formatting win:",t,"Win data:",e),t}}mapStatusToPrisma(e){return e.toUpperCase().replace(/-/g,"_")}mapStatusFromPrisma(e){let t=e.toLowerCase();return console.log("Mapping status from Prisma:",e,"to:",t),t}}let n=new s},9812:(e,t,r)=>{"use strict";r.d(t,{DT:()=>a,FY:()=>o,WJ:()=>l,gi:()=>u,jl:()=>n,x5:()=>d,yI:()=>i,yS:()=>s});class i extends Error{constructor(e){super(e),this.name="ValidationError"}}function a(e){if(!e||"string"!=typeof e)throw new i("Email is required");if(e.length>254)throw new i("Email is too long");if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e))throw new i("Invalid email format")}function s(e){if(!e||"string"!=typeof e)throw new i("Name is required");if(e.length<1||e.length>100)throw new i("Name must be between 1 and 100 characters");if(/[<>\"'&]/.test(e))throw new i("Name contains invalid characters")}function n(e){if(!e||"object"!=typeof e)throw new i("Address is required");for(let t of["street","city","state","zipCode","country"]){if(!e[t]||"string"!=typeof e[t])throw new i(`Address ${t} is required`);if(e[t].length>100)throw new i(`Address ${t} is too long`);if(/[<>\"'&]/.test(e[t]))throw new i(`Address ${t} contains invalid characters`)}if("United States"===e.country){if(!/^\d{5}(-\d{4})?$/.test(e.zipCode))throw new i("Invalid US ZIP code format (should be 12345 or 12345-6789)")}else if("Canada"===e.country){if(!/^[A-Za-z]\d[A-Za-z] \d[A-Za-z]\d$/.test(e.zipCode))throw new i("Invalid Canadian postal code format (should be A1A 1A1)")}else if(!/^[A-Za-z0-9\s-]{3,12}$/.test(e.zipCode))throw new i("Invalid postal code format");if("United States"===e.country&&!["AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","DC"].includes(e.state.toUpperCase()))throw new i("Invalid US state code (use 2-letter abbreviation like CA, NY, TX)");if(e.street.length<5)throw new i("Street address seems too short to be valid");if(e.city.length<2)throw new i("City name seems too short to be valid");for(let t of[/test|fake|invalid|example|dummy/i,/123.*main.*st/i,/111.*111|222.*222|999.*999/i])if(t.test(e.street)||t.test(e.city))throw new i("Please provide a valid, real address for shipping")}function o(e){if(e){if("string"!=typeof e)throw new i("Phone must be a string");if(e.length>20)throw new i("Phone number is too long");if(!/^[\d\s\-\(\)\+]+$/.test(e))throw new i("Invalid phone number format")}}function d(e,t){if("number"!=typeof e||isNaN(e))throw new i("Stake must be a valid number");if(e<.01)throw new i("Minimum stake is $0.01");if(e>1e4)throw new i("Maximum stake is $10,000");if(e>t)throw new i("Stake cannot exceed product price")}function u(e){if(!e||"object"!=typeof e)throw new i("Product is required");if(!e.name||"string"!=typeof e.name)throw new i("Product name is required");if(e.name.length>500)throw new i("Product name is too long");if("number"!=typeof e.price||isNaN(e.price))throw new i("Product price must be a valid number");if(e.price<.01||e.price>1e5)throw new i("Product price must be between $0.01 and $100,000");if(!e.currency||"string"!=typeof e.currency)throw new i("Product currency is required");if("USD"!==e.currency)throw new i("Only USD currency is supported");if(!e.url||"string"!=typeof e.url)throw new i("Product URL is required");try{new URL(e.url)}catch{throw new i("Invalid product URL")}if(e.image&&"string"!=typeof e.image)throw new i("Product image must be a string");if(e.image)try{new URL(e.image)}catch{throw new i("Invalid product image URL")}}function l(e){if("number"!=typeof e||isNaN(e))throw new i("Probability must be a valid number");if(e<0||e>1)throw new i("Probability must be between 0 and 1")}}};