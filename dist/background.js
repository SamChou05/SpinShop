var g=Object.defineProperty;var y=(i,e,r)=>e in i?g(i,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):i[e]=r;var p=(i,e,r)=>y(i,typeof e!="symbol"?e+"":e,r);const c={BASE_URL:"http://localhost:3001",API_ENDPOINTS:{USERS:"/api/users",WINS:"/api/wins",BETS:"/api/bets",STATS:"/api/stats"}};class l{static async createUser(e){return(await fetch(`${this.baseUrl}${c.API_ENDPOINTS.USERS}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}static async getUserByEmail(e){return(await fetch(`${this.baseUrl}${c.API_ENDPOINTS.USERS}?email=${encodeURIComponent(e)}`)).json()}static async recordBet(e){return(await fetch(`${this.baseUrl}${c.API_ENDPOINTS.BETS}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}static async updateUser(e,r){return(await fetch(`${this.baseUrl}${c.API_ENDPOINTS.USERS}/${e}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)})).json()}static async recordWin(e){return(await fetch(`${this.baseUrl}${c.API_ENDPOINTS.WINS}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}}p(l,"baseUrl",c.BASE_URL);var m={};class f{constructor(){this.setupMessageHandlers(),this.setupInstallHandler()}setupMessageHandlers(){chrome.runtime.onMessage.addListener((e,r,t)=>{switch(e.type){case"PRODUCT_FOUND":this.handleProductFound(e.product);break;case"ENTER_SPIN":return this.handleSpinRequest(e.product,e.stake).then(t),!0;case"INDICATOR_CLICKED":this.handleIndicatorClick(e.product);break;case"REGISTER_USER":return this.handleUserRegistration(e.userInfo).then(t),!0;case"COMPLETE_WIN":return this.handleCompleteWin(e.product,e.stake,e.userInfo).then(t),!0;case"CONFIRM_EXISTING_ADDRESS":return this.handleConfirmExistingAddress(e.product,e.stake,e.userInfo).then(t),!0}})}setupInstallHandler(){chrome.runtime.onInstalled.addListener(()=>{chrome.storage.sync.set({extensionEnabled:!0,soundEnabled:!1,animationsEnabled:!0})})}handleProductFound(e){console.log("Product detected:",e)}async handleIndicatorClick(e){const t=(await chrome.storage.local.get(["indicatorClicks"])).indicatorClicks||[];t.push({timestamp:Date.now(),product:{name:e.name,price:e.price,url:e.url},domain:new URL(e.url).hostname}),t.length>500&&t.splice(0,t.length-500),await chrome.storage.local.set({indicatorClicks:t}),console.log("Indicator clicked for product:",e.name)}async handleSpinRequest(e,r){if(typeof r!="number"||isNaN(r))return{won:!1,message:"Invalid stake amount"};if(r<.01)return{won:!1,message:"Minimum stake is $0.01"};if(r>1e4)return{won:!1,message:"Maximum stake is $10,000"};if(r>e.price)return{won:!1,message:"Stake cannot exceed product price"};const t=r/e.price,o=Math.min(t*.97,.97),u=new Uint32Array(1);crypto.getRandomValues(u);const d=u[0]/4294967296<o;if(!d)try{const a=await this.getCurrentUser(),w=(a==null?void 0:a.id)||"cmca1i2sb000ey73fv2sbjaqd";await this.recordBetToServer(e,r,o,d,w)}catch(a){console.error("Failed to record loss bet to server:",a)}if(d){const a=await this.getCurrentUser();return a?{won:!0,message:"Congratulations! You won! Please confirm your shipping address.",requiresAddressConfirmation:!0,existingUser:a}:{won:!0,message:"Congratulations! You won! Please provide your shipping information to claim your prize.",requiresUserInfo:!0}}else return this.recordSpinResult(e,r,!1),{won:!1,message:`You needed ${(o*100).toFixed(1)}% but luck wasn't on your side. Try again!`}}async getCurrentUser(){try{const r=(await chrome.storage.sync.get(["userInfo"])).userInfo;if(!r)return null;try{const n=await(await fetch(`${c.BASE_URL}/api/users?id=${r.id}`)).json();return!n.success||!n.data?(console.log("ðŸŽ° BACKGROUND: User no longer exists on server, clearing local storage"),await chrome.storage.sync.remove(["userInfo"]),null):r}catch(t){return console.error("Error validating user on server:",t),r}}catch(e){return console.error("Error getting current user:",e),null}}async handleUserRegistration(e){try{const r=await l.createUser(e);return r.success?(await chrome.storage.sync.set({userInfo:r.data}),{success:!0,userId:r.data.id}):{success:!1,error:r.error||"Unknown error"}}catch(r){return console.error("User registration failed:",r),{success:!1,error:"Network error"}}}async handleCompleteWin(e,r,t){try{const n=await this.handleUserRegistration(t);if(!n.success)return{won:!0,message:`You won, but registration failed: ${n.error}. Please try again.`};const s=r/e.price,h=Math.min(s*.97,.97);return await this.recordWinToServer(e,r,h,n.userId),{won:!0,message:`Congratulations! You won ${e.name}! We've recorded your win and will contact you about shipping.`}}catch(n){return console.error("Complete win failed:",n),{won:!0,message:"You won, but there was an error processing your win. Please contact support."}}}async handleConfirmExistingAddress(e,r,t){try{const n=r/e.price,u=Math.min(n*.97,.97);return await this.recordWinToServer(e,r,u,t.id),{won:!0,message:`Congratulations! You won ${e.name}! We've recorded your win and will contact you about shipping.`}}catch(n){return console.error("Failed to record win with existing address:",n),n instanceof Error&&n.message.includes("User not found")?(console.log("ðŸŽ° BACKGROUND: User not found on server, clearing local storage"),await chrome.storage.sync.remove(["userInfo"]),{won:!0,message:"Congratulations! You won! Please provide your shipping information to claim your prize.",requiresUserInfo:!0}):{won:!0,message:"You won! There was an issue recording your win. Please contact support."}}}async recordBetToServer(e,r,t,n,s){try{const o=await l.recordBet({userId:s,product:{name:e.name,price:e.price,currency:e.currency,url:e.url,image:e.image},stakeAmount:r,probability:t,won:n});if(!o.success)throw new Error(o.error||"Failed to record bet");console.log(`Bet (${n?"WIN":"LOSS"}) successfully recorded to server:`,o.data)}catch(o){throw console.error("Error recording bet to server:",o),o instanceof Error&&(o.message.includes("User not found")||o.message.includes("404"))?new Error("User not found"):o}}async recordWinToServer(e,r,t,n){try{await this.recordBetToServer(e,r,t,!0,n);const s=await l.recordWin({userId:n,product:{name:e.name,price:e.price,currency:e.currency,url:e.url,image:e.image},stakeAmount:r,probability:t});if(!s.success)throw new Error(s.error||"Failed to record win");this.recordSpinResult(e,r,!0),console.log("Win successfully recorded to server:",s.data)}catch(s){throw console.error("Error recording win to server:",s),s instanceof Error&&(s.message.includes("User not found")||s.message.includes("404"))?new Error("User not found"):s}}async createPaymentIntent(e,r){const t=await this.getStripeConfig();if(!t.apiKey)throw new Error("Stripe not configured");const n=await fetch("https://api.stripe.com/v1/payment_intents",{method:"POST",headers:{Authorization:`Bearer ${t.apiKey}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({amount:Math.round(e*100).toString(),currency:"usd","metadata[product_name]":r.name,"metadata[product_url]":r.url,"metadata[original_price]":r.price.toString()})});if(!n.ok)throw new Error(`Stripe API error: ${n.status}`);return await n.json()}async getStripeConfig(){return{apiKey:(await chrome.storage.sync.get(["stripeApiKey"])).stripeApiKey||m.STRIPE_SECRET_KEY}}async recordSpinResult(e,r,t){const s=(await chrome.storage.local.get(["spinHistory"])).spinHistory||[];s.push({timestamp:Date.now(),product:{name:e.name,price:e.price,url:e.url},stake:r,won:t,savings:t?r:0}),s.length>100&&s.splice(0,s.length-100),await chrome.storage.local.set({spinHistory:s})}}new f;
